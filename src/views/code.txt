  // private run() {
  //     replay;

  //     const svg = d3.create("svg")
  //         .attr("viewBox", [0, 0, width, height]);

  //     const updateBars = bars(svg);
  //     const updateAxis = axis(svg);
  //     const updateLabels = labels(svg);
  //     const updateTicker = ticker(svg);

  //     yield svg.node();

  //     for (const keyframe of keyframes) {
  //       const transition = svg.transition()
  //           .duration(duration)
  //           .ease(d3.easeLinear);

  //       // Extract the top barâ€™s value.
  //       x.domain([0, keyframe[1][0].value]);

  //       updateAxis(keyframe, transition);
  //       updateBars(keyframe, transition);
  //       updateLabels(keyframe, transition);
  //       updateTicker(keyframe, transition);

  //       invalidation.then(() => svg.interrupt());
  //       await transition.end();
  //     }
  // }

  // private bars(svg: any) {
  //   let bar = svg.append("g")
  //       .attr("fill-opacity", 0.6)
  //     .selectAll("rect");

  //   return ([date, data], transition) => bar = bar
  //     .data(data.slice(0, n), d => d.name)
  //     .join(
  //       enter => enter.append("rect")
  //         .attr("fill", color)
  //         .attr("height", y.bandwidth())
  //         .attr("x", x(0))
  //         .attr("y", d => y((prev.get(d) || d).rank))
  //         .attr("width", d => x((prev.get(d) || d).value) - x(0)),
  //       update => update,
  //       exit => exit.transition(transition).remove()
  //         .attr("y", d => y((next.get(d) || d).rank))
  //         .attr("width", d => x((next.get(d) || d).value) - x(0))
  //     )
  //     .call(bar => bar.transition(transition)
  //       .attr("y", d => y(d.rank))
  //       .attr("width", d => x(d.value) - x(0)));
  // }

  // private axis(svg) {
  //   const g = svg.append("g")
  //       .attr("transform", `translate(0,${margin.top})`);

  //   const axis = d3.axisTop(x)
  //       .ticks(width / 160)
  //       .tickSizeOuter(0)
  //       .tickSizeInner(-barSize * (n + y.padding()));

  //   return (_, transition) => {
  //     g.transition(transition).call(axis);
  //     g.select(".tick:first-of-type text").remove();
  //     g.selectAll(".tick:not(:first-of-type) line").attr("stroke", "white");
  //     g.select(".domain").remove();
  //   };
  // }

  // private labels(svg: any) {
  //   let label = svg.append("g")
  //       .style("font", "bold 12px var(--sans-serif)")
  //       .style("font-variant-numeric", "tabular-nums")
  //       .attr("text-anchor", "end")
  //     .selectAll("text");

  //   return ([date, data], transition) => label = label
  //     .data(data.slice(0, n), d => d.name)
  //     .join(
  //       enter => enter.append("text")
  //         .attr("transform", d => `translate(${x((prev.get(d) || d).value)},${y((prev.get(d) || d).rank)})`)
  //         .attr("y", y.bandwidth() / 2)
  //         .attr("x", -6)
  //         .attr("dy", "-0.25em")
  //         .text(d => d.name)
  //         .call(text => text.append("tspan")
  //           .attr("fill-opacity", 0.7)
  //           .attr("font-weight", "normal")
  //           .attr("x", -6)
  //           .attr("dy", "1.15em")),
  //       update => update,
  //       exit => exit.transition(transition).remove()
  //         .attr("transform", d => `translate(${x((next.get(d) || d).value)},${y((next.get(d) || d).rank)})`)
  //         .call(g => g.select("tspan").tween("text", d => textTween(d.value, (next.get(d) || d).value)))
  //     )
  //     .call(bar => bar.transition(transition)
  //       .attr("transform", d => `translate(${x(d.value)},${y(d.rank)})`)
  //       .call(g => g.select("tspan").tween("text", d => textTween((prev.get(d) || d).value, d.value))))
  // }

  // private ticker(svg: any) {
  //   const now = svg.append("text")
  //       .style("font", `bold ${barSize}px var(--sans-serif)`)
  //       .style("font-variant-numeric", "tabular-nums")
  //       .attr("text-anchor", "end")
  //       .attr("x", width - 6)
  //       .attr("y", margin.top + barSize * (n - 0.45))
  //       .attr("dy", "0.32em")
  //       .text(formatDate(keyframes[0][0]));

  //   return ([date], transition) => {
  //     transition.end().then(() => now.text(formatDate(date)));
  //   };
  // }